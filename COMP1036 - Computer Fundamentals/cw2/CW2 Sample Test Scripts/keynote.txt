所有流程分为4步

1. 从RAM [0] 确定排序方式和影响位数
2. 根据 > 0 < 0 正/负 SORT 的DIRECTION 和 LIMIT
3. 使用冒泡法进行排序
4.  结束条件

需要定义的模块可以有
start

asc
desc
outerloop
innerloop

swap
skip

end


参考代码
//读取RAM [0]
@0
D=M


//根据RAM[0]的数值进行分流

(start)
  @0
  D=M

  //请注意
  //将 RAM[0] 中的值存储在变量sortLimit中，作为对I，j 的约束
  @sortLimit
  M=D

  // 如果RAM[0]是正数n，则需要对数组的前n个元素进行排序
  @asc
  D;JGT
  
  // 如果是负数-n，则需要对数组的前-n个元素进行排序
  @desc
  D;JLT

-------------------------------------------------------------------
我想了一下这里，你需要再增加一个条件，就是等于0的情况，因为取值范围是-5 到 5， 如果设置为0的话不应该有任何排序操作，而是直接退出
// 如果是0，则不进行排序，跳转到结束
@end
0;JMP
-------------------------------------------------------------------

以下为ASC, DESC的结构

(asc)
//Sort ASC
@end
0;JMP

(desc)
//Sort DESC
@end
0;JMP


循环控制

(outerLoop)
    // 读取循环计数器 i 的值到 D 寄存器
    @i
    D=M

    // 如果 i >= n，则结束排序
    @sortLimit
    D=D-A
    @end
    D;JGE

    // 初始化循环计数器 j = i + 1
    @j
    M=M+1

(innerLoop)
    // 读取数组元素 RAM[11+i] 的值到 D 寄存器
    @11
    D=A
    @i
    D=D+M

    // 读取下一个数组元素 RAM[11+j] 的值到 A 寄存器
    @11
    A=A+M
    @j
    A=A+M
    D=D-A

    // 如果 RAM[11+i] > RAM[11+j]，则交换两个元素的值 请注意这里是升序排序，如果是降序排序那么这里的逻辑相反
    @swap
    D;JGT

    // 如果 RAM[11+i] <= RAM[11+j]，继续下一次循环
    @noSwap
    0;JMP


swap的代码参考教材， skip的代码如下
(skip)
    // 内部循环结束后，外部循环计数器 i = i + 1
    @i
    M=M+1

    // 跳回外部循环进行下一轮排序
    @outerLoop
    0;JMP

冒泡排序一般来说不需要调整，你可以参考这里进行优化
https://www.programiz.com/dsa/bubble-sort
冒泡法的优势就是代码简洁，逻辑简单，但是优化有问题，如果是反向的数组，那么难度为O(n^2)，你可以尝试实现Merge sort，中文叫做归并排序
https://www.programiz.com/dsa/merge-sort

这两种算法你可以粗略的理解为，使用天平在5个小球中找到质量不正确的那个 你需要称几次 （考虑最差可能性）
冒泡法相当于两两相比 （1：1）
归并相当于第一次称4个球 （2：2），然后称2个球（1：1）
